// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/ghibli/ghibli.go

// Package mock_ghibli is a generated GoMock package.
package mock_ghibli

import (
	gomock "github.com/golang/mock/gomock"
	ghibli "github.com/ymohl-cl/cineplus/pkg/ghibli"
	reflect "reflect"
)

// MockClient is a mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// Ping mocks base method
func (m *MockClient) Ping() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping")
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping
func (mr *MockClientMockRecorder) Ping() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockClient)(nil).Ping))
}

// Movies mocks base method
func (m *MockClient) Movies() ([]ghibli.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Movies")
	ret0, _ := ret[0].([]ghibli.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Movies indicates an expected call of Movies
func (mr *MockClientMockRecorder) Movies() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Movies", reflect.TypeOf((*MockClient)(nil).Movies))
}

// Peoples mocks base method
func (m *MockClient) Peoples() ([]ghibli.People, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Peoples")
	ret0, _ := ret[0].([]ghibli.People)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Peoples indicates an expected call of Peoples
func (mr *MockClientMockRecorder) Peoples() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Peoples", reflect.TypeOf((*MockClient)(nil).Peoples))
}
